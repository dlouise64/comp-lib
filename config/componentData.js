module.exports = [{"name":"EyeIcon","description":"SVG Eye Icon","code":"import React from 'react';\n\n/** SVG Eye Icon */\n\nfunction EyeIcon() {\n  return (\n    <svg width=\"24\" height=\"24\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 22 22\"><g transform=\"matrix(.02146 0 0 .02146 1 1)\" fill=\"#4d4d4d\"><path d=\"m466.07 161.53c-205.6 0-382.8 121.2-464.2 296.1-2.5 5.3-2.5 11.5 0 16.9 81.4 174.9 258.6 296.1 464.2 296.1 205.6 0 382.8-121.2 464.2-296.1 2.5-5.3 2.5-11.5 0-16.9-81.4-174.9-258.6-296.1-464.2-296.1m0 514.7c-116.1 0-210.1-94.1-210.1-210.1 0-116.1 94.1-210.1 210.1-210.1 116.1 0 210.1 94.1 210.1 210.1 0 116-94.1 210.1-210.1 210.1\"/><circle cx=\"466.08\" cy=\"466.02\" r=\"134.5\"/></g></svg>\n  )\n}\n\nexport default EyeIcon;\n","examples":[{"name":"ExampleEyeIcon","description":"EyeIcon","code":"import React from 'react';\nimport EyeIcon from 'sil-react/EyeIcon';\n\n/** EyeIcon */\nexport default function ExampleEyeIcon() {\n  return <EyeIcon />;\n}\n"}]},{"name":"Label","description":"Label with required field display, htmlFor, and block styling","props":{"htmlFor":{"type":{"name":"string"},"required":true,"description":"HTML ID for associated input"},"label":{"type":{"name":"string"},"required":true,"description":"Label text"},"required":{"type":{"name":"bool"},"required":false,"description":"Display asterix after label if true"}},"code":"import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './Label.css';\n\n/** Label with required field display, htmlFor, and block styling */\nfunction Label({htmlFor, label, required}) {\n  return (\n    <label style={{display: 'block'}} htmlFor={htmlFor}>\n      {label} { required && <span style={{color: 'red'}}> *</span> }\n    </label>\n  )\n}\n\nLabel.propTypes = {\n  /** HTML ID for associated input */\n  htmlFor: PropTypes.string.isRequired,\n\n  /** Label text */\n  label: PropTypes.string.isRequired,\n\n  /** Display asterix after label if true */\n  required: PropTypes.bool\n};\n\nLabel.defaultProps = {\n}\n\nexport default Label;\n","examples":[{"name":"ExampleLabel","description":"Label","code":"import React from 'react';\nimport Label from 'sil-react/Label';\n\n/** Label */\nexport default function ExampleLabel() {\n  return <Label\n    label=\"Label for label\"\n    htmlFor=\"optional_label\"\n  />;\n}\n"},{"name":"ExampleLabelRequired","description":"Label Required","code":"import React from 'react';\nimport Label from 'sil-react/Label';\n\n/** Label Required */\nexport default function ExampleLabelRequired() {\n  return <Label\n    label=\"Label for label\"\n    htmlFor=\"req_label\"\n    required\n  />;\n}\n"}]},{"name":"PasswordInput","description":"","props":{"htmlId":{"type":{"name":"string"},"required":true,"description":"Unique HTML ID"},"name":{"type":{"name":"string"},"required":true,"description":"Input name"},"value":{"type":{"name":"any"},"required":false,"description":"Password value"},"label":{"type":{"name":"string"},"required":false,"description":"Input label","defaultValue":{"value":"'Password'","computed":false}},"onChange":{"type":{"name":"func"},"required":true,"description":"Function called when password input value changes"},"maxLength":{"type":{"name":"number"},"required":false,"description":"Max password length accepted","defaultValue":{"value":"50","computed":false}},"placeholder":{"type":{"name":"string"},"required":false,"description":"Placeholder"},"showVisibilityToggle":{"type":{"name":"bool"},"required":false,"description":"set to true to show the toggle for displaying the currently entered password","defaultValue":{"value":"false","computed":false}},"quality":{"type":{"name":"number"},"required":false,"description":"Display password quality visually via ProgressBar, accepts a number between 0 and 100"},"error":{"type":{"name":"string"},"required":false,"description":"Validation error to display"}},"code":"import React from 'react';\nimport PropTypes from 'prop-types';\nimport ProgressBar from '../ProgressBar';\nimport EyeIcon from '../EyeIcon';\nimport TextInput from '../TextInput';\n\n// import './PasswordInput.css';\n\nclass PasswordInput extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      showPassword: false\n    }\n  }\n\n  toggleShowPassword = event => {\n    this.setState(prevState => {\n      return { showPassword: !prevState.showPassword };\n    });\n    if (event) event.preventDefault();\n  }\n  render() {\n    const { htmlId, value, label, error, onChange, placeholder, maxLength, showVisibilityToggle, quality, ...props} = this.props;\n    const { showPassword } = this.state;\n\n    return (\n      <TextInput\n        htmlId={htmlId}\n        label={label}\n        placeholder={placeholder}\n        type={showPassword ? 'text' : 'password'}\n        onChange={onChange}\n        value={value}\n        maxLength={maxLength}\n        error={error}\n        required\n        {...props}>\n        {\n          showVisibilityToggle &&\n        <span\n          onClick={this.toggleShowPassword}\n          style={{\n            position: 'absolute',\n            right: '-35px',\n            top: '27px',\n            bottom: 0\n          }}\n        >\n          <EyeIcon />\n        </span>\n        }\n        {\n          value.length > 0 && quality && <ProgressBar percent={quality} width={206} height={7} />\n        }\n      </TextInput>\n    );\n  }\n}\n\nPasswordInput.propTypes = {\n  /** Unique HTML ID */\n  htmlId: PropTypes.string.isRequired,\n\n  /** Input name */\n  name: PropTypes.string.isRequired,\n\n  /** Password value */\n  value: PropTypes.any,\n\n  /** Input label */\n  label: PropTypes.string,\n\n  /** Function called when password input value changes */\n  onChange: PropTypes.func.isRequired,\n\n  /** Max password length accepted */\n  maxLength: PropTypes.number,\n\n  /** Placeholder */\n  placeholder: PropTypes.string,\n\n  /** set to true to show the toggle for displaying the currently entered password */\n  showVisibilityToggle: PropTypes.bool,\n\n  /** Display password quality visually via ProgressBar, accepts a number between 0 and 100 */\n  quality: PropTypes.number,\n\n  /** Validation error to display */\n  error: PropTypes.string\n};\n\nPasswordInput.defaultProps = {\n  maxLength: 50,\n  showVisibilityToggle: false,\n  label: 'Password'\n}\n\nexport default PasswordInput;\n","examples":[{"name":"ExamplePasswordInput","description":"All features enabled","code":"import React from 'react';\nimport PasswordInput from 'sil-react/PasswordInput';\n\n/** All features enabled */\n\nclass ExampleAllFeatures extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      password: ''\n    }\n  }\n\n  getQuality() {\n    const length = this.state.password.length;\n    return length > 10 ? 100 : length * 10;\n  }\n\n  render() {\n    return (\n      <div>\n        <PasswordInput\n          htmlId=\"password\"\n          name=\"password\"\n          onChange={ event => this.setState({ password: event.target.value })}\n          value={this.state.password}\n          minLength={8}\n          placeholder=\"Enter Password\"\n          showVisibilityToggle\n          quality={this.getQuality()}\n          {...this.props} />\n      </div>\n    )\n  }\n}\n\nexport default ExampleAllFeatures;\n"}]},{"name":"ProgressBar","description":"","props":{"percent":{"type":{"name":"number"},"required":true,"description":"Percent of progress completed"},"width":{"type":{"name":"number"},"required":true,"description":"Bar width"},"height":{"type":{"name":"number"},"required":false,"description":"Bar height","defaultValue":{"value":"5","computed":false}}},"code":"import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './ProgressBar.css';\n\nclass ProgressBar extends React.Component {\n\n  getColor = percent => {\n    if(this.props.percent === 100) return 'green';\n    return this.props.percent > 50 ? 'lightgreen' : 'red';\n  }\n\n  getWidthAsPercentOfTotalWidth = () => {\n    return parseInt(this.props.width * (this.props.percent / 100), 10);\n  }\n  render() {\n    const {percent, width, height} = this.props;\n    return (\n      <div style={{border: 'solid 1px lightgray', width: width}} className=\"progressBar\">\n        <div style={{\n          width: this.getWidthAsPercentOfTotalWidth(),\n          height,\n          backgroundColor: this.getColor(percent)\n        }}>\n        </div>\n      </div>\n    );\n  }\n}\n\nProgressBar.propTypes = {\n  /** Percent of progress completed */\n  percent: PropTypes.number.isRequired,\n\n  /** Bar width */\n  width: PropTypes.number.isRequired,\n\n  /** Bar height */\n  height: PropTypes.number\n};\n\nProgressBar.defaultProps = {\n  height: 5\n}\n\nexport default ProgressBar;\n","examples":[{"name":"Example100Percent","description":"Example100Percent","code":"import React from 'react';\nimport ProgressBar from 'sil-react/ProgressBar';\n\n/** Example100Percent*/\nexport default function Example100Percent() {\n  return <ProgressBar percent={100} width={150} />;\n}\n"},{"name":"Example10Percent","description":"Example10Percent","code":"import React from 'react';\nimport ProgressBar from 'sil-react/ProgressBar';\n\n/** Example10Percent*/\nexport default function Example10Percent() {\n  return <ProgressBar percent={10} width={150} />;\n}\n"},{"name":"Example70Percent","description":"Example70Percent","code":"import React from 'react';\nimport ProgressBar from 'sil-react/ProgressBar';\n\n/** Example70Percent*/\nexport default function Example70Percent() {\n  return <ProgressBar percent={70} width={150} />;\n}\n"}]},{"name":"RegistrationForm","description":"","props":{"confirmationMessage":{"type":{"name":"string"},"required":false,"description":"message displayed upon successful submission","defaultValue":{"value":"\"Thanks for registering\"","computed":false}},"onSubmit":{"type":{"name":"func"},"required":true,"description":"Called when form is submitted"},"minPasswordLength":{"type":{"name":"number"},"required":false,"description":"Minimum password length","defaultValue":{"value":"8","computed":false}}},"code":"import React from 'react';\nimport PropTypes from 'prop-types';\nimport TextInput from '../TextInput';\nimport PasswordInput from '../PasswordInput';\n\nimport './RegistrationForm.css';\n\nclass RegistrationForm extends React.Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      user: {\n        email: '',\n        password: ''\n      },\n      errors: {},\n      submitted: false\n    }\n  }\n\n  onChange = event => {\n    const user = this.state.user;\n    user[event.target.name] = event.target.value;\n    this.setState({user});\n  }\n\n  passwordQuality(password) {\n    if(!password) return null;\n    if(password.length >= this.props.minPasswordLength) return 100;\n    const percentOfMinLength = parseInt(password.length/this.props.minPasswordLength * 100, 10);\n    return percentOfMinLength;\n  }\n\n  validate({email, password}) {\n    const errors = {};\n    const {minPasswordLength} = this.props;\n\n    if(!email) errors.email = 'Email required';\n    if(password.length < minPasswordLength) errors.password = `Password must be at least ${minPasswordLength} characters`;\n    this.setState({errors});\n    const formIsValid = Object.getOwnPropertyNames(errors).length === 0;\n    return formIsValid;\n  }\n\n  onSubmit = () => {\n    const {user} = this.state;\n    const formIsValid = this.validate(user);\n    if(formIsValid) {\n      this.props.onSubmit(user);\n      this.setState({submitted: true});\n    }\n  }\n  render() {\n    const {errors, submitted} = this.state;\n    const {email, password} = this.state.user;\n    return (\n      submitted ?\n      <h2>{this.props.confirmationMessage}</h2> :\n      <div className=\"registrationForm\">\n        <TextInput\n          htmlId=\"registration-form-email\"\n          name=\"email\"\n          onChange={this.onChange}\n          label=\"Email\"\n          value={email}\n          error={errors.email}\n          required\n          />\n        <PasswordInput\n          htmlId=\"registration-form-password\"\n          name=\"password\"\n          value={password}\n          onChange={this.onChange}\n          quality={this.passwordQuality(password)}\n          showVisibilityToggle\n          maxLength={50}\n          error={errors.password}\n        />\n\n        <input type=\"submit\" value=\"Register\" onClick={this.onSubmit} />\n      </div>\n    );\n  }\n}\n\nRegistrationForm.propTypes = {\n  /** message displayed upon successful submission */\n  confirmationMessage: PropTypes.string,\n\n  /** Called when form is submitted */\n  onSubmit: PropTypes.func.isRequired,\n\n  /** Minimum password length */\n  minPasswordLength: PropTypes.number\n};\n\nRegistrationForm.defaultProps = {\n  confirmationMessage: \"Thanks for registering\",\n  minPasswordLength: 8\n}\n\nexport default RegistrationForm;\n","examples":[{"name":"ExampleRegistrationForm","description":"RegistrationForm","code":"import React from 'react';\nimport RegistrationForm from 'sil-react/RegistrationForm';\n\n/** RegistrationForm */\nexport default function ExampleRegistrationForm() {\n  return <RegistrationForm />;\n}\n"}]},{"name":"TextInput","description":"Text input","props":{"htmlId":{"type":{"name":"string"},"required":true,"description":"Unique HTML ID. Used for tying label to HTML input."},"name":{"type":{"name":"string"},"required":true,"description":"Input name"},"label":{"type":{"name":"string"},"required":true,"description":"Input Label"},"type":{"type":{"name":"enum","value":[{"value":"'text'","computed":false},{"value":"'number'","computed":false},{"value":"'password'","computed":false}]},"required":false,"description":"Input type","defaultValue":{"value":"\"text\"","computed":false}},"required":{"type":{"name":"bool"},"required":false,"description":"Mark label with asterisk if set to true","defaultValue":{"value":"false","computed":false}},"onChange":{"type":{"name":"func"},"required":true,"description":"function to call onChange"},"placeholder":{"type":{"name":"string"},"required":false,"description":"Placeholder to display when empty"},"value":{"type":{"name":"any"},"required":false,"description":"value"},"error":{"type":{"name":"string"},"required":false,"description":"String to display when error occurs"},"children":{"type":{"name":"node"},"required":false,"description":"Child component to display next to input"}},"code":"import React from 'react';\nimport PropTypes from 'prop-types';\nimport Label from '../Label';\nimport './TextInput.css';\n\n/** Text input */\nfunction TextInput({htmlId, name, label, type=\"text\", required=false, onChange, placeholder, value, error, children, ...props}) {\n  return (\n    <div style={{\n      marginBottom: 16,\n      position: 'relative',\n      display: 'inline-block'}}>\n      <Label htmlFor={htmlId} label={label} required={required} />\n      <input\n        className=\"textInput\"\n        id={htmlId}\n        type={type}\n        name={name}\n        placeholder={placeholder}\n        value={value}\n        onChange={onChange}\n        style={error && { border: 'solid 1px red' }}\n        {...props} />\n        {children}\n        { error && <div className=\"error\" style={{color: 'red'}}>{error}</div>}\n    </div>\n  )\n}\n\nTextInput.propTypes = {\n  /** Unique HTML ID. Used for tying label to HTML input. */\n  htmlId: PropTypes.string.isRequired,\n\n  /** Input name */\n  name: PropTypes.string.isRequired,\n\n  /** Input Label */\n  label: PropTypes.string.isRequired,\n\n  /** Input type */\n  type: PropTypes.oneOf(['text', 'number', 'password']),\n\n  /** Mark label with asterisk if set to true */\n  required: PropTypes.bool,\n\n  /** function to call onChange */\n  onChange: PropTypes.func.isRequired,\n\n  /** Placeholder to display when empty */\n  placeholder: PropTypes.string,\n\n  /** value */\n  value: PropTypes.any,\n\n  /** String to display when error occurs */\n  error: PropTypes.string,\n\n  /** Child component to display next to input */\n  children: PropTypes.node\n};\n\nexport default TextInput;\n","examples":[{"name":"ExampleError","description":"Required Text Box with error","code":"import React from 'react';\nimport TextInput from 'sil-react/TextInput';\n\n/** Required Text Box with error*/\nexport default function ExampleError() {\n  return (\n    <TextInput\n      htmlId=\"example-optional\"\n      label=\"email\"\n      name=\"email\"\n      required\n      error=\"email is required\"\n      onChange={() => {}}\n    />\n  );\n}\n"},{"name":"ExampleTextInput","description":"Optional Text Box","code":"import React from 'react';\nimport TextInput from 'sil-react/TextInput';\n\n/** Optional Text Box */\nexport default function ExampleOptional() {\n  return (\n    <TextInput\n      htmlId=\"example-optional\"\n      label=\"email\"\n      name=\"email\"\n      onChange={() => {}}\n    />\n  );\n}\n"}]}]